package com.myshop.controller;

import java.io.File;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.myshop.domain.ProductVO;
import com.myshop.service.ProductService;

@Controller
@RequestMapping("/product/*")
public class ProductController {
	@Autowired
	ProductService service;
	@Resource(name = "uploadPath")
	String uploadPath;

	@GetMapping("/home")
	public void home(String category, Model model) {
		List<String> categorys = service.categorylist();
		List<ProductVO> products = service.productList(category);
		model.addAttribute("categorys", categorys);
		model.addAttribute("products", products);
	}

	@GetMapping("/get")
	public void get(int id, Model model) {
		List<String> categorys = service.categorylist();
		ProductVO product = service.productGet(id);
		model.addAttribute("categorys", categorys);
		model.addAttribute("product", product);
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@GetMapping("/category/register")
	public void categoryRegister() {
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@GetMapping("/category/list")
	public void categorylist(Model model) {
		List<String> list = service.categorylist();
		model.addAttribute("list", list);
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@PostMapping("/category/register")
	public String categoryRegister(String categoryname) {
		service.categoryRegister(categoryname);
		return "redirect:/product/category/list";
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@GetMapping("/category/delete")
	public String categoryDelete(String categoryname) {
		service.categoryDelete(categoryname);
		return "redirect:/product/category/list";
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@GetMapping("/register")
	public void register(Model model) {
		List<String> categorys = service.categorylist();
		model.addAttribute("categorys", categorys);
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@PostMapping("/register")
	public String productRegister(ProductVO product) throws Exception {
		// 파일 경로와 파일명 설정
		UUID uuid = UUID.randomUUID();
		String savedName = uuid.toString() + product.getFile().getOriginalFilename();
		File target = new File(uploadPath, savedName);
		// 실제 파일을 받아와서 업로드
		FileCopyUtils.copy(product.getFile().getBytes(), target);

		// 파일 경로 설정
		product.setSrc("/myshop/resources/img/" + savedName);
		// 파일명 설정
		product.setImgname(savedName);

		service.productRegister(product);
		return "redirect:/";
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@GetMapping("/update")
	public void productUpdate(int id, Model model) {
		List<String> categorys = service.categorylist();
		ProductVO product = service.productGet(id);
		model.addAttribute("product", product);
		model.addAttribute("categorys", categorys);
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@PostMapping("/update")
	public String productUpdate(ProductVO product, String imgModify) throws Exception {

		if (imgModify.equals("1")) {
			UUID uuid = UUID.randomUUID();
			String savedName = uuid.toString() + product.getFile().getOriginalFilename();
			File target = new File(uploadPath, savedName);

			FileCopyUtils.copy(product.getFile().getBytes(), target);

			product.setSrc("/myshop/resources/img/" + savedName);
//		System.out.println(product.getSrc());
//		System.out.println(product.getFile());
		}

		service.productUpdate(product);
		return "redirect:/";
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@GetMapping("/delete")
	public String productDelete(int id) {
		
		ProductVO product = service.productGet(id);
		
		File file = new File(uploadPath + "/" + product.getImgname());
		System.out.println(uploadPath + "/" + product.getImgname());

		if (file.exists()) {
			if (file.delete()) {
				System.out.println("파일삭제 성공");
			} else {
				System.out.println("파일삭제 실패");
			}
		}

		service.productDelete(id);

		return "redirect:/";
	}

}
